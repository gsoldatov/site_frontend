import { DataGenerator } from "../_mock-data/data-generator";


/**
 * Wraps mock data generator and provides it with custom values stored in backend cache.
 */
export class BackendDataGenerator {
    constructor(backend) {
        this.backend = backend;
        this._generator = new DataGenerator();
    }

    /**
     * Returns object attributes (including object tags) & data generated by backend for the provided `object_id`
     */
    object(object_id) {
        const [cachedAttributes, cachedData] = this.backend.cache.objects.get(object_id);
        const attributes = this._generator.object.attributes({ ...cachedAttributes, object_id });
        const data = this._generator.object.data(object_id, attributes.object_type, cachedData);
        return { attributes, data };
    }

    /**
     * Returns tag attributes generated by backend for the provided `tag_id`
     */
    tag(tag_id) {
        const cachedTag = this.backend.cache.tags.get(tag_id);
        return this._generator.tag.tag({ ...cachedTag, tag_id });
    }

    /**
     * Returns user attributes generated by backend for the provided `user_id`.
     * 
     * `full_view_mode` is a flag, which toggles between full and minimal sets of returned attributes.
     */
    user(user_id, full_view_mode) {
        const cachedUser = this.backend.cache.users.get(user_id);
        if (full_view_mode) return this._generator.user.user({ ...cachedUser, user_id });
        else return this._generator.user.userMin({ ...cachedUser, user_id });
    }
}
