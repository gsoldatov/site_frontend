import { DataGenerator } from "../_mock-data/data-generator";

import type { MockBackend } from "./mock-backend";
import type { ObjectAttributes, ObjectDataUnion } from "../_mock-data/modules/objects";
import type { Tag } from "../_mock-data/modules/tags";
import type { User, UserMin } from "../_mock-data/modules/users";


/**
 * Wraps mock data generator and provides it with custom values stored in backend cache.
 */
export class BackendDataGenerator {
    private backend: MockBackend
    private _generator: DataGenerator

    constructor(backend: MockBackend) {
        this.backend = backend;
        this._generator = new DataGenerator();
    }

    /**
     * Returns object attributes (including object tags) & data generated by backend for the provided `object_id`.
     */
    object(object_id: number): { attributes: ObjectAttributes, data: ObjectDataUnion } {
        const [cachedAttributes, cachedData] = this.backend.cache.objects.get(object_id);
        const attributes = this._generator.object.attributes({ ...cachedAttributes, object_id });
        const data = this._generator.object.data(object_id, attributes.object_type, cachedData);
        return { attributes, data };
    }

    /**
     * Returns tag attributes generated by backend for the provided `tag_id`.
     */
    tag(tag_id: number): Tag {
        const cachedTag = this.backend.cache.tags.get(tag_id);
        return this._generator.tag.tag({ ...cachedTag, tag_id });
    }

    /**
     * Returns full set of user attributes generated by backend for the provided `user_id`.
     */
    user(user_id: number): User {
        const cachedUser = this.backend.cache.users.get(user_id);
        return this._generator.user.user({ ...cachedUser, user_id });
    }

    /**
     * Returns minimal set of user attributes generated by backend for the provided `user_id`.
     */
    userMin(user_id: number): UserMin {
        const cachedUser = this.backend.cache.users.get(user_id);
        return this._generator.user.userMin({ ...cachedUser, user_id });
    }

    /**
     * Returns app settings, generated by backend.
     */
    settings() {
        const cachedSettings = this.backend.cache.settings.get();
        return this._generator.settings.settings(cachedSettings);
    }
}
