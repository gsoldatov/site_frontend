import type { ObjectAttributes, PartialObjectDataUnion } from "../../../_mock-data/modules/objects"; 


/**
 * Stores custom values for objects generated by backend.
 */
export class ObjectsCache {
    private cache: {
        attributes: Record<number, Partial<ObjectAttributes>>,
        data: Record<number, PartialObjectDataUnion>
    }
    constructor() {
        this.cache = { attributes: {}, data: {} };
    }

    /**
     * Returns custom attributes and data stored for the specified `object_id` or empty objects
     */
    get(object_id: number): [Partial<ObjectAttributes>, PartialObjectDataUnion] {
        const attributes = this.cache.attributes[object_id] || {};
        const data = this.cache.data[object_id] || {};
        return [attributes, data];
    }

    /**
     * Adds or updates object `attributes` and/or `data` for the specified `object_id`.
     * 
     * `object_id` is always added to the attributes of the object.
     */
    update(object_id: number, attributes?: Partial<ObjectAttributes>, data?: PartialObjectDataUnion): void {
        if (object_id === undefined) throw Error("object_id is required.");

        if (typeof(attributes) === "object") {
            if (!(object_id in this.cache.attributes)) this.cache.attributes[object_id] = {};
            this.cache.attributes[object_id] = { ...this.cache.attributes[object_id], ...attributes, object_id };
        }

        if (typeof(data) === "object") {
            if (!(object_id in this.cache.data)) this.cache.data[object_id] = {};
            this.cache.data[object_id] = { ...this.cache.data[object_id], ...data };
        }
    }

    /**
     * Replaces object `attributes` and/or `data` for the specified `object_id`.
     * 
     * `object_id` is always added to the attributes of the object.
     */
    replace(object_id: number, attributes?: Partial<ObjectAttributes>, data?: PartialObjectDataUnion): void {
        if (object_id === undefined) throw Error("object_id is required.");
        if (typeof(attributes) === "object") this.cache.attributes[object_id] = { ...attributes, object_id };
        if (typeof(data) === "object") this.cache.data[object_id] = data;
    }
}
