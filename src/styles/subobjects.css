/*******************************************************
        Subobjects grid, card & menu styling.  
*******************************************************/
:root {
    --subobject-grid-column-container-min-width: 240px;
    --subobject-grid-column-multicolumn-width: 500px;
    --subobject-new-column-dropzone-min-width: 20px;
    --subobject-new-column-dropzone-width: 50px;

    --subobject-card-max-width: 1000px;
    --subobject-card-min-height: 100px;
    --subobject-card-collapsed-height: 32px;    /* set fixed height close to actual height it takes; also equals to SUIR <Loader> component with default size prop height (which is not rendered anymore) */
    --subobject-card-padding-top-bottom: 0.5em;
    --subobject-card-padding-left-right: 0.75em;

    --subobject-card-default-margin-bottom: 2em;

    --subobject-card-expand-collapse-time: 0.20s;
    --subobject-card-expand-toggle-rotation: 90deg;

    --subobject-dropzone-background-color: rgba(100, 200, 100, 0.25);
}


/** Layout grid & main content column **/
.layout-grid.multicolumn-composite-data, .layout-grid-main-content-column.multicolumn-composite-data {
    /* Override min-width to fit multicolumn composite subobject grids */
    min-width: max-content;
}

/* .layout-grid-side-menu-column.multicolumn-composite-data:not(.stacked) {
    /* max-width: 240px;   /* Limit max width of side menu to default value for 1920x1080 screen (when multicolumn subobjects overflow main column) * /
    min-width: 100px;   /* Limit min width * /
} */

.ui.grid > .column.row > [class*="two wide"].column.layout-grid-side-menu-column.multicolumn-composite-data:not(.stacked) {
    width: 240px !important; /* Set fixed side menu width when displaying multicolumn composite data */
}


.layout-grid-main-row.multicolumn-composite-data:not(.stacked) {
    /* Force placing both columns in main row on a single line when grid is not stacked */
    flex-wrap: nowrap;
}

.ui.grid > .row > .layout-grid-main-content-column.column.layout-grid-main-content-column.multicolumn-composite-data {
    /* Add padding to main content column */
    padding-right: 1rem;
}


/** Stacked side menu when displaying composite object data **/
.layout-grid-side-menu-column.multicolumn-composite-data.stacked > .ui.menu.side-menu {
    /* Set fixed position, so that menu is always stretched to the size of the window (top position should be calculated automatically based on navbar height) */
    position: fixed;
    z-index: 999;
    left: 0;
    right: 0;
}


/** Subobjects grid, columns & dropzones, common **/
div.composite-subobject-grid {
    display: flex;
    margin: -0.5em; /* reduce padding of SUIR div.tab (1em) by half */

    min-width: 0;   /* shrink flex container when `composite-subobject-card-heading-text` content overflows available space */
}

div.composite-subobject-grid-column-container {
    display: flex;
    flex-direction: row;

    /* Align center for fullscreen resolution and single column mode */
    justify-content: center;

    min-width: 0;   /* shrink flex container when `composite-subobject-card-heading-text` content overflows available space */
}

div.composite-subobject-grid-new-column-dropzone {
    align-self: center;
    height: calc(100% - 2 * calc(var(--subobject-card-padding-top-bottom)));
    margin-top: calc(var(--subobject-card-padding-top-bottom));
    margin-bottom: calc(var(--subobject-card-padding-top-bottom));
}

div.composite-subobject-grid-new-column-dropzone.is-dragged-over {
    background-color: var(--subobject-dropzone-background-color);
}

div.composite-subobject-grid-column {
    min-width: 0;   /* shrink flex container when `composite-subobject-card-heading-text` content overflows available space */
}


/** Subobjects grid, columns & dropzones, single column **/
div.composite-subobject-grid {
    justify-content: center;
}

div.composite-subobject-grid:not(.multicolumn) div.composite-subobject-grid-column-container {
    flex: 1 0 calc(var(--subobject-grid-column-container-min-width) + 2 * var(--subobject-new-column-dropzone-min-width));
}

div.composite-subobject-grid:not(.multicolumn) div.composite-subobject-grid-column {
    flex-grow: 1;
    flex-shrink: 1;
    
    max-width: var(--subobject-card-max-width);
}

div.composite-subobject-grid:not(.multicolumn) div.composite-subobject-grid-new-column-dropzone {
    /* In single column mode dropzone width can vary between min and default width */
    flex: 1 1 var(--subobject-new-column-dropzone-width);
    min-width: var(--subobject-new-column-dropzone-min-width);
    max-width: var(--subobject-new-column-dropzone-width);
}


/** Subobjects grid, columns & dropzones, multicolumn **/
div.composite-subobject-grid.multicolumn div.composite-subobject-grid-column-container:not(.two-dropzones) {
    /* Set fixed size (all columns except last) */
    flex: 0 0 calc(var(--subobject-grid-column-multicolumn-width) + var(--subobject-new-column-dropzone-width));
    min-width: calc(var(--subobject-grid-column-multicolumn-width) + var(--subobject-new-column-dropzone-width));  /* min-width is required to correctly calculate max-content of parent containers */
}

div.composite-subobject-grid.multicolumn div.composite-subobject-grid-column-container.two-dropzones {
    /* Set fixed size (all columns except last) */
    flex: 0 0 calc(var(--subobject-grid-column-multicolumn-width) + 2 * var(--subobject-new-column-dropzone-width));
    min-width: calc(var(--subobject-grid-column-multicolumn-width) + 2 * var(--subobject-new-column-dropzone-width));  /* min-width is required to correctly calculate max-content of parent containers */
}

div.composite-subobject-grid.multicolumn div.composite-subobject-grid-column {
    /* Set fixed size */
    flex-grow: 1;
    flex-shrink: 0;
    max-width: var(--subobject-grid-column-multicolumn-width);
}

div.composite-subobject-grid.multicolumn div.composite-subobject-grid-new-column-dropzone {
    /* Set fixed size */
    flex-grow: 0;
    flex-shrink: 0;
    width: var(--subobject-new-column-dropzone-width);
}

/* /* Column container & column * /
div.composite-subobject-grid-column-container {
    display: flex;
    flex-direction: row;
    /* Set columns with equal width and a min width (min card width + 1 new column dropzone) * /
    flex: 1 0 calc(var(--subobject-grid-column-container-min-width) + var(--subobject-new-column-dropzone-width));
    min-width: calc(var(--subobject-grid-column-container-min-width) + var(--subobject-new-column-dropzone-width));  /* min-width is required to correctly calculate max-content of parent containers * /
}


div.composite-subobject-grid-column-container.two-dropzones {
    /* Increase min width to include 2 new column dropzones * /
    flex: 1 0 calc(var(--subobject-grid-column-container-min-width) + 2 * var(--subobject-new-column-dropzone-width));
    min-width: calc(var(--subobject-grid-column-container-min-width) + 2 * var(--subobject-new-column-dropzone-width));  /* min-width is required to correctly calculate max-content of parent containers * /
}

div.composite-subobject-grid-column {
    /* Always fully fill subobject-grid-column-container * /
    flex-grow: 1;
}

/* New column dropzone * /
div.composite-subobject-grid-new-column-dropzone {
    flex: 0 0 var(--subobject-new-column-dropzone-width);

    align-self: center;
    /* height: 100%; * /
    height: calc(100% - 2 * calc(var(--subobject-card-padding-top-bottom)));
    margin-top: calc(var(--subobject-card-padding-top-bottom));
    /* padding-top: 2.5em; * /
    margin-bottom: calc(var(--subobject-card-padding-top-bottom));
}

div.composite-subobject-grid-new-column-dropzone.is-dragged-over {
    background-color: var(--subobject-dropzone-background-color);
} */


/** Card **/
div.composite-subobject-card {
    /* Borders and margin */
    box-shadow: 0 0 4px rgba(0,0,0,0.5);
    margin: 0.5em;
}

div.composite-subobject-card.is-dragged {
    /* Hide dragged cards */
    display: none;
}

div.composite-subobject-card {    
    margin-bottom: var(--subobject-card-default-margin-bottom);

    /* Padding */
    padding-top: var(--subobject-card-padding-top-bottom);
    padding-left: var(--subobject-card-padding-left-right);
    padding-right: var(--subobject-card-padding-left-right);

    /* Expand => collapse animation */
    transition: min-height var(--subobject-card-expand-collapse-time) ease-out;
    min-height: 0;
    padding-bottom: 0;      /* Only padding-bottom is removed, because `heading-container` always compensates for left, right and top paddings of `composite-subobject-card` */
}

div.composite-subobject-card.expanded {
    /* Collapse => expand animation */
    transition: min-height var(--subobject-card-expand-collapse-time) ease-in;
    min-height: var(--subobject-card-min-height);
    padding-bottom: var(--subobject-card-padding-top-bottom);
}

div.composite-subobject-card.is-dragged-over {
    box-shadow: 0 0 0 6px var(--subobject-dropzone-background-color);
}


/** Full card placeholders (loader, error) **/
div.composite-subobject-card.no-padding {
    padding: 0;
    min-height: var(--subobject-card-min-height);

    /* Center content vertically */
    display: flex;
    flex-direction: column;
    justify-content: center;
}

div.composite-subobject-card.no-padding.is-draggable {
    cursor: grab;
}

div.ui.message.subobject-error-message {
    height: var(--subobject-card-min-height);

    display: flex;
    flex-direction: column;
}

div.subobject-error-button-container {
    padding: 0.5rem;

    display: flex;
    justify-content: center;
}


/** Card heading **/
div.composite-subobjct-card-heading-container {
    background-color: rgba(0, 0, 0, 0.04);
    /* Remove the padding of `div.composite-subobject-card` to make a correct line */
    margin-top: calc(-1 * var(--subobject-card-padding-top-bottom));
    margin-left: calc(-1 * var(--subobject-card-padding-left-right));
    margin-right: calc(-1 * var(--subobject-card-padding-left-right));
}

div.composite-subobjct-card-heading-container.is-hovered-over {
    box-shadow: 0 0 4px rgba(0,0,0,0.5);
    cursor: grab;
}

div.composite-subobjct-card-heading {
    width: 100%;
    height: var(--subobject-card-collapsed-height);
    display: inline-flex;
    min-width: 0;   /* shrink flex container when `composite-subobject-card-heading-text` content overflows available space */
}

div.composite-subobject-card-heading-left, div.composite-subobject-card-heading-right {
    display: inline-flex;
    align-items: center;
    padding-top: 0.25em;
    padding-bottom: 0.25em;
    min-width: 0;   /* shrink flex container when `composite-subobject-card-heading-text` content overflows available space */
}

div.composite-subobject-card-heading-right {
    margin-left: auto;  /* align div to the right side of its parent */
    margin-right: 0.5rem;
    flex-shrink: 0;
}

div.composite-subobject-card-heading-object-type-icon {
    margin-left: 0.5em;
    flex-shrink: 0;
}

div.composite-subobject-card-heading-text {
    margin-left: 0.5em;
    font-size: 1.2em;
    font-weight: bold;

    /* Disable text selection */
    cursor: default;
    user-select: none;

    /* Disable displaying object name on multiple lines */
    height: 1.2em;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    min-width: 0;
}

div.composite-subobject-card-heading-text.unnamed {
    font-weight: normal;
    color: gray;
}

div.composite-subobject-card-heading-text.is-hovered-over {
    cursor: grab;
}


/** Expand/collapse button **/
button.ui.button.subobject-card-expand-toggle {
    flex-shrink: 0;
    margin-left: 0.25rem;
    transition: var(--subobject-card-expand-collapse-time);
    /*-webkit-transition: var(--subobject-card-expand-collapse-time);   /* properties for better browser support * / 
    -moz-transition: var(--subobject-card-expand-collapse-time);
    -ms-transition: var(--subobject-card-expand-collapse-time);
    -o-transition: var(--subobject-card-expand-collapse-time);*/
}
  
button.ui.button.subobject-card-expand-toggle.expanded {
    transition: var(--subobject-card-expand-collapse-time);
    /*-webkit-transition: var(--subobject-card-expand-collapse-time);   /* properties for better browser support * / 
    -moz-transition: var(--subobject-card-expand-collapse-time);
    -ms-transition: var(--subobject-card-expand-collapse-time);
    -o-transition: var(--subobject-card-expand-collapse-time);
    -webkit-transform: rotate(var(--subobject-card-expand-toggle-rotation));
    -moz-transform: rotate(var(--subobject-card-expand-toggle-rotation));
    -o-transform: rotate(var(--subobject-card-expand-toggle-rotation));
    -ms-transform: rotate(var(--subobject-card-expand-toggle-rotation)); */
    transform: rotate(var(--subobject-card-expand-toggle-rotation));
} 


/** Card menu **/
div.menu.composite-subobject-card-menu {
    /* Allow multiline display of children */
    display: flex;
    flex-wrap: wrap;

    /* Reduce margin */
    margin-top: 0.5rem;
    margin-bottom: 0.5rem;
}

.ui.secondary.menu div.item.composite-subobject-secondary-menu-item {
    padding-left: 0;
    padding-right: 0;
}

.ui.secondary.menu div.item.composite-subobject-secondary-menu-item.link {
    padding-top: 0;     /* Remove excess padding when compared to non-link items */
    padding-bottom: 0;
}

.ui.secondary.menu div.item.composite-subobject-secondary-menu-item a button {
    margin-right: 0;
}


/** Deleted subobject message **/
div.ui.message.deleted-subobject-message {
    margin: 0;
}


/* Subobject dialog */
div.subobject-card-dialog-container {
    box-shadow: 0 0 4px rgba(0,0,0,0.5);
    padding: 1rem;
}

div.subobject-card-dialog-button-container {
    width: 100%;
    display: flex;
    justify-content: center;
}

.ui.header.subobject-card-dialog-header {
    margin-bottom: 0.5rem;
}

button.ui.button.subobject-card-dialog-button {
    width: 64px;
    margin-left: 0.25rem;
    margin-right: 0.25rem;
}


/** Card tabs **/
.composite-subobject-card-tab > *:not(:last-child) {
    margin-bottom: 1rem;
}


/** Add menu **/
div.composite-subobject-card.add-menu {
    /* Override default `composite-subobject-card` params */
    min-height: min-content;
    margin: 0.5em;
    padding: 0.25em;

    /* Center content horizontally */
    text-align: center;

    /* Center content vertically */
    display: flex;
    flex-direction: column;
    justify-content: center;
}

button.ui.composite-subobject-add-menu-button {
    padding-left: 1em;
    padding-right: 1em;
    width: 120px;   /* min size which fits the text of each button */
}

div.ui.search.selection.dropdown.composite-object-add-menu-dropdown {
    width: 100%;
}
